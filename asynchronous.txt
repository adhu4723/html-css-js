# Callbacks, Promises, and Async/Await in JavaScript

## 1. Callbacks
A **callback function** is a function passed as an argument to another function and is executed later, usually after an asynchronous operation is completed.

### Example:
```js
function fetchData(callback) {
    setTimeout(() => {
        console.log("Data fetched");
        callback();
    }, 2000);
}

function processData() {
    console.log("Processing data...");
}

fetchData(processData);
```

### Issues with Callbacks:
- **Callback Hell**: Nested callbacks lead to unreadable and difficult-to-maintain code.
- **Difficult Error Handling**: Managing errors in deeply nested callbacks can be challenging.

---

## 2. Promises
A **Promise** represents a value that may be available now, in the future, or never. It has three states:
1. **Pending** – Initial state, neither fulfilled nor rejected.
2. **Fulfilled** – The operation completed successfully.
3. **Rejected** – The operation failed.

### Example:
```js
function fetchData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            let success = true;
            if (success) {
                resolve("Data fetched");
            } else {
                reject("Error fetching data");
            }
        }, 2000);
    });
}

fetchData()
    .then(data => console.log(data))
    .catch(error => console.log(error));
```

### Advantages of Promises:
- **Better Readability**: Avoids callback hell.
- **Chaining**: `.then()` and `.catch()` allow for sequential execution.
- **Built-in Error Handling**: Errors can be caught using `.catch()`.

---

## 3. Async/Await
**Async/Await** is a syntactic sugar over Promises that makes asynchronous code look synchronous, improving readability.

### Example:
```js
async function fetchData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve("Data fetched");
        }, 2000);
    });
}

async function process() {
    try {
        let data = await fetchData();
        console.log(data);
    } catch (error) {
        console.log(error);
    }
}

process();
```

### Benefits of Async/Await:
- **Improved Readability**: Looks like synchronous code.
- **Error Handling**: Uses `try...catch` blocks for better error management.
- **Easier Debugging**: Stack traces are clearer than Promise chains.

---
### Summary Table:
| Feature | Callbacks | Promises | Async/Await |
|---------|----------|----------|-------------|
| Readability | Difficult (Callback Hell) | Better (Chaining) | Best (Looks synchronous) |
| Error Handling | Hard | `.catch()` | `try...catch` |
| Debugging | Complex | Moderate | Easy |
| Flexibility | Less | More | Most |

### Best Practices:
1. **Use Promises** instead of callbacks for cleaner code.
2. **Use Async/Await** when possible for better readability.
3. **Always handle errors** using `.catch()` in Promises or `try...catch` in Async/Await.

---
By understanding these concepts, you can write efficient, readable, and maintainable asynchronous JavaScript code!

